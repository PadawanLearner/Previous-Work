
/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

function calculateTriangleNumber(n){
	var triangleSum = 0;
	for (var i = 1; i<n + 1; i++){
		triangleSum = triangleSum + i;
	}
	return triangleSum;
}

function numberOfDivisors(n){

	//1 is the exception case, i.e. it only has one divisor because one and itself are the same number: 1*1 = 1
	if (n == 1){
		return 1;
	}

	//Initialize the numer of divisors to 2 because each number always has atleast 2 divisors, one and itself, i.e. any number times 1 is that number. 
	var number = 2;

	//Now find the other divisors:
	for (var i = 2; i < Math.ceil(Math.sqrt(n)); i++){
		if (n%i == 0){
			//If the number is divisible by a value less than its root, you know it is divisible by that number and some other number that is greater than the root, so we have to increment the count by 2.
			number = number + 2;
		}
	}
	return number;
}

//Starting at 8 since the problem statement already did iterations 1 through 7 for us..
var ctr = 8;
//We don't know how many iterations we will need, so we have to use a while-loop flag
var answerFound = false;
while (!answerFound){

	//The line below is basically the core of the problem
	if (numberOfDivisors(calculateTriangleNumber(ctr)) > 500){
		alert("I am the answer: " + calculateTriangleNumber(ctr));
		answerFound = true;
	}
	ctr++;
}









